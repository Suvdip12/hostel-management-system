generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hostel {
  id               String  @id @default(cuid())
  name             String  @unique
  address          String?
  contactEmail     String? @unique
  contactPhone     String?
  isActive         Boolean @default(true)
  subscriptionPlan String  @default("FREE_TRIAL")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users               User[]
  meals               Meal[]
  guestMeals          GuestMeal[]
  userPayments        UserPayment[]
  userBills           UserBill[]
  userFines           UserFine[]          @relation("HostelFines")
  issuedFines         UserFine[]          @relation("HostelFineIssuer")
  audits              Audit[]
  attendances         MealAttendance[]
  dailyMealActivities DailyMealActivity[]
  notifications       Notification[]      @relation("HostelNotifications")
  activityLogs        ActivityLog[]       @relation("HostelActivity")
  userMealEvents      UserMealEvent[]
  Media               Media[]
  mealScheduleEntries MealScheduleEntry[]

  @@map("hostels")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime? @map("email_verified")
  image          String?
  hashedPassword String?   @map("hashed_password")

  hostelId String? @map("hostel_id")
  hostel   Hostel? @relation(fields: [hostelId], references: [id], onDelete: SetNull)

  roomNo              String?        @map("room_id")
  gender              GenderType?
  religion            String?
  dob                 DateTime?
  education           Json?
  selfPhNo            String?        @map("self_ph_no")
  guardianPhNo        String?        @map("guardian_ph_no")
  address             String?
  bio                 String?
  role                UserRoleType   @default(STUDENT)
  status              UserStatusType @default(INACTIVE)
  joinDate            DateTime?      @map("join_date")
  onboardingCompleted Boolean        @default(false) @map("onboarding_completed")
  mealPreference      Json           @default("{}") @map("meal_preference")
  newChargelist       Json[]         @default([]) @map("new_charge_list")
  helpSection         Json[]         @default([]) @map("help_section")

  deletedAt DateTime? @map("deleted_at")

  meals                 Meal[]
  guestMeals            GuestMeal[]
  payments              UserPayment[]
  userBills             UserBill[]
  fines                 UserFine[]       @relation("UserFines")
  issuedFines           UserFine[]       @relation("FineIssuer")
  audits                Audit[]
  attendances           MealAttendance[]
  receivedNotifications Notification[]   @relation("Recipient")
  issuedNotifications   Notification[]   @relation("Issuer")
  activityLogs          ActivityLog[]    @relation("UserActivity")
  accounts              Account[]
  sessions              Session[]
  userMealEvent         UserMealEvent[]
  audit                 Audit[]          @relation("AuditApprover")
  UserPayment           UserPayment[]    @relation("PaymentProcessor")
  GuestMeal             GuestMeal[]      @relation("GuestMealApprover")
  UserFine              UserFine[]       @relation("FineWaiver")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([hostelId, email])
  @@index([name, hostelId])
  @@index([hostelId])
  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Meal {
  id                  String         @id @default(cuid())
  userId              String         @unique @map("user_id")
  type                MealType
  nonVegType          NonVegType     @default(NONE)
  status              MealStatusType @default(INACTIVE)
  dislikedNonVegTypes NonVegType[]   @default([]) @map("disliked_non_veg_types")
  hostelId            String         @map("hostel_id")
  hostel              Hostel         @relation(fields: [hostelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  attendances MealAttendance[]

  @@index([hostelId])
  @@map("meals")
}

model Audit {
  id        String @id @default(cuid())
  auditorId String @map("auditor_id")

  hostelId String @map("hostel_id")
  hostel   Hostel @relation(fields: [hostelId], references: [id])

  date               DateTime
  riceExpenses       Float    @map("rice_expenses")
  vegetableExpenses  Float    @map("vegetable_expenses")
  fishExpenses       Float    @map("fish_expenses")
  dailyExpenses      Float    @map("daily_expenses")
  grandTotalExpenses Float    @map("grand_total_expenses")
  adjustment         Float
  otherExpenses      Float    @map("other_expenses")
  totalBoarders      Int      @map("total_boarders")
  mealCharge         Float    @map("meal_charge")
  createdAt          DateTime @default(now()) @map("created_at")

  auditor     User          @relation(fields: [auditorId], references: [id], onDelete: Restrict)
  userBills   UserBill[]
  payments    UserPayment[]
  attachments Media[]
  approvedBy  String?       @map("approved_by")
  approvedAt  DateTime?     @map("approved_at")
  version     Int           @default(0)

  approver User? @relation("AuditApprover", fields: [approvedBy], references: [id], onDelete: Restrict)

  @@index([hostelId])
  @@map("audits")
}

model UserPayment {
  id      String @id @default(cuid())
  userId  String @map("user_id")
  auditId String @map("audit_id")

  hostelId String @map("hostel_id")
  hostel   Hostel @relation(fields: [hostelId], references: [id])

  paidAmount Float             @map("paid_amount")
  starus     PaymentStatusType

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  audit Audit @relation(fields: [auditId], references: [id], onDelete: Cascade)

  createdAt     DateTime   @default(now()) @map("created_at")
  userBill      UserBill[]
  paymentMethod String?    @map("payment_method")
  transactionId String?    @unique @map("transaction_id")
  processedBy   String?    @map("processed_by")
  processedAt   DateTime?  @map("processed_at")

  processor User? @relation("PaymentProcessor", fields: [processedBy], references: [id], onDelete: Restrict)

  @@index([hostelId])
  @@map("user_payments")
}

model UserBill {
  id     String @id @default(cuid())
  userId String @map("user_id")

  hostelId String @map("hostel_id")
  hostel   Hostel @relation(fields: [hostelId], references: [id])

  auditId          String?       @map("audit_id")
  fineId           String?       @map("fine_id")
  guestMealId      String?       @map("guest_meal_id")
  paymentId        String?       @map("payment_id")
  type             BillEntryType
  amount           Float
  description      String?
  issueDate        DateTime      @default(now()) @map("issue_date")
  dueDate          DateTime?     @map("due_date")
  isPaid           Boolean       @default(false) @map("is_paid")
  balanceRemaining Float         @map("balance_remaining")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  user      User         @relation(fields: [userId], references: [id])
  audit     Audit?       @relation(fields: [auditId], references: [id])
  fine      UserFine?    @relation(fields: [fineId], references: [id])
  guestMeal GuestMeal?   @relation(fields: [guestMealId], references: [id])
  payment   UserPayment? @relation(fields: [paymentId], references: [id])

  @@index([hostelId])
  @@map("user_bills")
}

model GuestMeal {
  id     String @id @default(cuid())
  userId String @map("user_id")

  hostelId String @map("hostel_id")
  hostel   Hostel @relation(fields: [hostelId], references: [id], onDelete: Cascade)

  name          String
  numberOfMeals Int                 @map("number_of_meals")
  mealCharge    Float               @map("meal_charge")
  date          DateTime
  type          MealType
  nonVegType    NonVegType
  mealTime      MealTimeType
  mobileNumber  String              @map("mobile_number")
  status        GuestMealStatusType @default(PENDING)
  createdAt     DateTime            @default(now()) @map("created_at")

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userBill   UserBill[]
  approvedBy String?    @map("approved_by")
  approvedAt DateTime?  @map("approved_at")

  approver User? @relation("GuestMealApprover", fields: [approvedBy], references: [id], onDelete: Restrict)

  @@index([hostelId])
  @@map("guest_meals")
}

model UserFine {
  id     String @id @default(cuid())
  userId String @map("user_id")

  hostelId String @map("hostel_id")
  hostel   Hostel @relation("HostelFines", fields: [hostelId], references: [id])

  amount   Float
  reason   String
  status   FineStatusType @default(PENDING)
  issuedBy String         @map("issued_by")

  issuedByHostelId String @map("issued_by_hostel_id")
  issuedByHostel   Hostel @relation("HostelFineIssuer", fields: [issuedByHostelId], references: [id])

  dueDate   DateTime  @map("due_date")
  paidDate  DateTime? @map("paid_date")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  userBill UserBill[]

  user     User      @relation("UserFines", fields: [userId], references: [id], onDelete: Cascade)
  issuer   User      @relation("FineIssuer", fields: [issuedBy], references: [id], onDelete: Cascade)
  waivedBy String?   @map("waived_by")
  waivedAt DateTime? @map("waived_at")

  waiver User? @relation("FineWaiver", fields: [waivedBy], references: [id], onDelete: Restrict)

  @@index([hostelId])
  @@index([issuedByHostelId])
  @@map("user_fines")
}

model DailyMealActivity {
  id       String       @id @default(cuid())
  mealTime MealTimeType
  hostelId String       @map("hostel_id")
  hostel   Hostel       @relation(fields: [hostelId], references: [id], onDelete: Cascade)

  totalMeal          Int         @map("total_meals")
  totalGuestMeal     Int         @map("total_guest_meals")
  totalVeg           Int         @map("total_veg")
  totalNonvegChicken Int         @map("total_nonveg_chicken")
  totalNonvegFish    Int         @map("total_nonveg_fish")
  totalNonvegEgg     Int         @map("total_nonveg_egg")
  date               DateTime    @map("meal_date")
  actualNonVegServed NonVegType? @map("actual_non_veg_served")
  createdAt          DateTime    @default(now()) @map("created_at")
  updatedAt          DateTime    @updatedAt @map("updated_at")

  @@unique([hostelId, mealTime, createdAt])
  @@index([hostelId, mealTime, createdAt])
  @@index([hostelId])
  @@map("daily_meal_activities")
}

model MealAttendance {
  id       String       @id @default(cuid())
  userId   String       @map("user_id")
  mealTime MealTimeType @map("meal_time")
  date     DateTime
  mealId   String?      @map("meal_id")
  hostelId String       @map("hostel_id")
  hostel   Hostel       @relation(fields: [hostelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User  @relation(fields: [userId], references: [id])
  meal Meal? @relation(fields: [mealId], references: [id])

  @@unique([hostelId, userId, date, mealTime])
  @@index([hostelId])
  @@map("meal_attendances")
}

model Notification {
  id          String @id @default(cuid())
  title       String
  message     String
  recipientId String

  hostelId String @map("hostel_id")
  hostel   Hostel @relation("HostelNotifications", fields: [hostelId], references: [id], onDelete: Cascade)

  user      User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId  String
  issuer    User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now()) @map("created_at")

  @@index([hostelId])
  @@map("notifications")
}

model ActivityLog {
  id     String @id @default(cuid())
  userId String @map("user_id")

  hostelId String @map("hostel_id")
  hostel   Hostel @relation("HostelActivity", fields: [hostelId], references: [id], onDelete: Cascade)

  actionType String   @map("action_type")
  entityType String?  @map("entity_type")
  entityId   String?  @map("entity_id")
  oldData    Json?    @map("old_data")
  newData    Json?    @map("new_data")
  timestamp  DateTime @default(now())
  details    String?
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")

  user User @relation("UserActivity", fields: [userId], references: [id], onDelete: Cascade)

  @@index([hostelId, userId])
  @@map("activity_logs")
}

model Media {
  id     String    @id @default(cuid())
  postId String?
  entry  EntryType
  url    String

  hostelId String @map("hostel_id")
  hostel   Hostel @relation(fields: [hostelId], references: [id], onDelete: Cascade)

  post Audit? @relation(fields: [postId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@map("posr_media")
}

model MenuItem {
  id                  String                        @id @default(cuid())
  name                String                        @unique
  costPerUnit         Float
  createdAt           DateTime                      @default(now())
  updatedAt           DateTime                      @updatedAt
  mealScheduleEntries MenuItemOnMealScheduleEntry[]

  @@map("menu_items")
}

model MealScheduleEntry {
  id        String       @id @default(cuid())
  hostelId  String
  hostel    Hostel       @relation(fields: [hostelId], references: [id], onDelete: Cascade)
  dayOfWeek DayOfWeek
  mealTime  MealTimeType

  menuItems MenuItemOnMealScheduleEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([hostelId, dayOfWeek, mealTime])
  @@map("meal_schedule_entries")
}

model MenuItemOnMealScheduleEntry {
  id                  String @id @default(cuid())
  mealScheduleEntryId String
  menuItemId          String

  mealScheduleEntry MealScheduleEntry @relation(fields: [mealScheduleEntryId], references: [id], onDelete: Cascade)
  menuItem          MenuItem          @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([mealScheduleEntryId, menuItemId])
  @@map("menu_item_on_meal_schedule_entries")
}

model UserMealEvent {
  id     String @id @default(cuid())
  userId String @map("user_id")

  hostelId String @map("hostel_id")
  hostel   Hostel @relation(fields: [hostelId], references: [id], onDelete: Cascade)

  mealTime  MealTimeType
  date      DateTime
  type      MealEventType?
  message   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([hostelId, userId, date, mealTime])
  @@index([hostelId])
  @@map("user_meal_events")
}

enum EntryType {
  AUDIT
  DAILY
}

enum GenderType {
  MALE
  FEMALE
  OTHER
}

enum UserRoleType {
  STUDENT
  STAFF
  MANAGER
  AUDITOR
  ADMIN
  SUPER_ADMIN
}

enum UserStatusType {
  ACTIVE
  INACTIVE
  SUSPENDED
  FORMA
}

enum FineStatusType {
  CANCELLED
  PENDING
  PAID
  WAIVED
  OVERDUE
}

enum PaymentStatusType {
  REFUNDED
  CANCELLED
  PENDING
  PAID
  FAILED
}

enum MealType {
  VEG
  NON_VEG
}

enum NonVegType {
  MUTTON
  CHICKEN
  FISH
  EGG
  NONE
}

enum MealTimeType {
  LUNCH
  DINNER
}

enum MealStatusType {
  MAINTENANCE
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum GuestMealStatusType {
  SERVED
  CANCELLED
  APPROVED
  PENDING
  REJECTED
}

enum NotificationType {
  PAYMENT
  MEAL
  FINE
  ANNOUNCEMENT
  SYSTEM
}

enum BillEntryType {
  SECURITY_DEPOSIT
  REFUND
  MEAL_CHARGE
  FINE_CHARGE
  GUEST_MEAL_CHARGE
  PAYMENT
  ADJUSTMENT_CREDIT
  ADJUSTMENT_DEBIT
}

enum MealEventType {
  REQUEST
  STAFF_NOTE
  OTHER
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
