generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(cuid())
  name                String?
  email               String         @unique
  emailVerified       DateTime?      @map("email_verified")
  image               String?
  hashedPassword      String?        @map("hashed_password")
  hostelId            String?        @map("hostel_id")
  roomId              String?        @map("room_id")
  gender              GenderType?
  religion            ReligionType?
  dob                 DateTime?
  education           Json?
  selfPhNo            String?        @map("self_ph_no")
  guardianPhNo        String?        @map("guardian_ph_no")
  address             String?
  bio                 String?
  role                UserRoleType   @default(STUDENT)
  status              UserStatusType @default(PENDING_ONBOARDING)
  joinDate            DateTime?      @map("join_date")
  onboardingCompleted Boolean        @default(false) @map("onboarding_completed")
  message             String[]       @default([])
  mealPreference      Json           @default("{}") @map("meal_preference")
  mealInfoList        Json[]         @default([]) @map("meal_info_list") // Good for user-specific meal notes/history
  newChargelist       Json[]         @default([]) @map("new_charge_list") // Good for one-off, flexible charges
  helpSection         Json[]         @default([]) @map("help_section") // Good for user-specific help content/links

  deletedAt DateTime? @map("deleted_at")

  hostel                Hostel?          @relation("HostelUsers", fields: [hostelId], references: [id])
  room                  Room?            @relation(fields: [roomId], references: [id])
  meals                 Meal[]
  guestMeals            GuestMeal[]
  payments              UserPayment[]
  fines                 UserFine[]       @relation("UserFines")
  issuedFines           UserFine[]       @relation("FineIssuer")
  audits                Audit[]
  attendances           MealAttendance[]
  receivedNotifications Notification[]   @relation("Recipient")
  issuedNotifications   Notification[]   @relation("Issuer")

  activityLogs ActivityLog[] @relation("UserActivity")

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([name])
  @@map("users")
}

model Hostel {
  id       String  @id @default(cuid())
  name     String
  tag      String
  address  String?
  capacity Int?

  deletedAt DateTime? @map("deleted_at")
  users     User[]    @relation("HostelUsers")
  rooms     Room[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("hostels")
}

model Room {
  id         String  @id @default(cuid())
  hostelId   String  @map("hostel_id")
  roomNumber String? @map("room_number")
  floor      Int

  deletedAt DateTime? @map("deleted_at")

  hostel    Hostel   @relation(fields: [hostelId], references: [id])
  users     User[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("rooms")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Meal {
  id         String         @id @default(cuid())
  userId     String         @unique @map("user_id")
  mealType   MealType
  nonVegType NonVegType
  status     MealStatusType
  createdAt  DateTime       @default(now()) @map("created_at")
  updatedAt  DateTime       @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@map("meals")
}

model Audit {
  id                 String   @id @default(cuid())
  auditorId          String   @map("auditor_id")
  date               DateTime
  riceExpenses       Float    @map("rice_expenses")
  vegetableExpenses  Float    @map("vegetable_expenses")
  fishExpenses       Float    @map("fish_expenses")
  dailyExpenses      Float    @map("daily_expenses")
  grandTotalExpenses Float    @map("grand_total_expenses")
  adjustment         Float
  otherExpenses      Float    @map("other_expenses")
  totalBoarders      Int      @map("total_boarders")
  mealCharge         Float    @map("meal_charge")
  createdAt          DateTime @default(now()) @map("created_at")

  auditor     User          @relation(fields: [auditorId], references: [id])
  payments    UserPayment[]
  attachments Media[]

  @@map("audits")
}

model UserPayment {
  id         String            @id @default(cuid())
  userId     String            @map("user_id")
  auditId    String            @map("audit_id")
  paidAmount Float             @map("paid_amount")
  starus     PaymentStatusType

  user  User  @relation(fields: [userId], references: [id])
  audit Audit @relation(fields: [auditId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@map("user_payments")
}

model GuestMeal {
  id            String              @id @default(cuid())
  userId        String              @map("user_id")
  numberOfMeals Int                 @map("number_of_meals")
  mealCharge    Float               @map("meal_charge")
  date          DateTime
  mealType      MealType
  nonVegType    NonVegType
  mealTime      MealTimeType
  mobileNumber  String              @map("mobile_number")
  status        GuestMealStatusType
  createdAt     DateTime            @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("guest_meals")
}

model UserFine {
  id        String         @id @default(cuid())
  userId    String         @map("user_id")
  amount    Float
  reason    String
  status    FineStatusType @default(PENDING)
  issuedBy  String         @map("issued_by")
  dueDate   DateTime       @map("due_date")
  paidDate  DateTime?      @map("paid_date")
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")

  user   User @relation("UserFines", fields: [userId], references: [id])
  issuer User @relation("FineIssuer", fields: [issuedBy], references: [id]) // The user (e.g., manager, admin) who issued this fine

  @@map("user_fines")
}

model DailyMealActivity {
  id                 String       @id @default(cuid())
  mealTime           MealTimeType
  totalGuestMeals    Int          @map("total_guest_meals")
  totalVeg           Int          @map("total_veg")
  totalNonvegChicken Int          @map("total_nonveg_chicken")
  totalNonvegFish    Int          @map("total_nonveg_fish")
  totalNonvegEgg     Int          @map("total_nonveg_egg")
  messages           String[]
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")

  @@map("daily_meal_activities")
}

model MealAttendance {
  id        String       @id @default(cuid())
  userId    String       @map("user_id")
  date      DateTime
  mealTime  MealTimeType
  present   Boolean
  mealType  MealType
  createdAt DateTime     @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("meal_attendances")
}

model Notification {
  id          String           @id @default(cuid())
  userId      String           @map("user_id")
  title       String
  message     String
  recipientId String
  user        User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now()) @map("created_at")

  @@map("notifications")
}

model ActivityLog {
  id         String   @id @default(cuid())
  userId     String?  @map("user_id") // Nullable if system actions or anonymous actions are logged
  actionType String   @map("action_type") // e.g., "CREATE", "UPDATE", "DELETE", "LOGIN", "VIEW_PROFILE"
  entityType String?  @map("entity_type") // e.g., "User", "Meal", "Room", "Payment"
  entityId   String?  @map("entity_id") // The ID of the record that was affected (e.g., "user_id", "meal_id")
  oldData    Json?    @map("old_data") // JSON representation of the data before the change
  newData    Json?    @map("new_data") // JSON representation of the data after the change
  timestamp  DateTime @default(now())
  details    String? // A human-readable description of the action
  ipAddress  String?  @map("ip_address") // Optional: for security/origin tracking
  userAgent  String?  @map("user_agent") // Optional: browser/device info

  user User? @relation("UserActivity", fields: [userId], references: [id]) // Optional relation

  @@map("activity_logs")
}

model Media {
  id     String    @id @default(cuid())
  postId String?
  post   Audit?    @relation(fields: [postId], references: [id], onDelete: SetNull)
  entry  EntryType
  url    String

  createdAt DateTime @default(now())

  @@map("posr_media")
}

enum EntryType {
  AUDIT
  DAILY
}

// Enums
enum GenderType {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum ReligionType {
  HINDU
  MUSLIM
  CHRISTIAN
  SIKH
  BUDDHIST
  JAIN
  OTHER
}

enum UserRoleType {
  STUDENT
  MANAGER
  ADMIN
  STAFF
}

enum UserStatusType {
  PENDING_ONBOARDING
  ACTIVE
  INACTIVE
  SUSPENDED
  FORMER
}

enum FineStatusType {
  PENDING
  PAID
  WAIVED
  OVERDUE
}

enum PaymentStatusType {
  PENDING
  PAID
  FAILED
}

enum MealType {
  VEG
  NON_VEG
}

enum NonVegType {
  CHICKEN
  FISH
  EGG
  NONE
}

enum MealTimeType {
  LUNCH
  DINNER
}

enum MealStatusType {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum GuestMealStatusType {
  ACTIVE
  PENDING
  REJECTED
}

enum NotificationType {
  PAYMENT
  MEAL
  FINE
  ANNOUNCEMENT
  SYSTEM
}
